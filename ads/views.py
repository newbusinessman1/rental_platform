# ads/views.py
from functools import wraps

from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import login as auth_login
from django.core.exceptions import PermissionDenied
from django.db.models import Count, Avg
from django.http import HttpResponse
from django.shortcuts import get_object_or_404, redirect, render
from django.urls import reverse
from django.utils import timezone
from django.views.generic import ListView, DetailView, TemplateView

from rest_framework import viewsets, permissions, generics
from rest_framework.response import Response
from rest_framework.views import APIView

from .forms import ListingForm, BookingForm
from .models import Listing, Booking, Review, ViewHistory
from .serializers import ListingSerializer, BookingSerializer, ReviewSerializer


# ========= –ü—É–±–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã =========

class HomeView(ListView):
    model = Listing
    template_name = "home.html"
    context_object_name = "listings"

    def get_queryset(self):
        return (
            Listing.objects
            .annotate(
                reviews_count=Count("reviews"),
                avg_rating=Avg("reviews__rating"),
                views_count=Count("views"),
            )
            .order_by("-id")
        )


def register(request):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + –∞–≤—Ç–æ-–ª–æ–≥–∏–Ω ‚Üí –≥–ª–∞–≤–Ω–∞—è."""
    if request.method == "POST":
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            auth_login(request, user)
            return redirect("home")
    else:
        form = UserCreationForm()
    return render(request, "accounts/register.html", {"form": form})


class ListingDetailView(DetailView):
    model = Listing
    template_name = "ads/listing_detail.html"
    context_object_name = "listing"
    slug_field = "slug"
    slug_url_kwarg = "slug"

    def get(self, request, *args, **kwargs):
        resp = super().get(request, *args, **kwargs)
        listing = self.get_object()
        # –ª–æ–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        ViewHistory.objects.create(
            listing=listing,
            user=request.user if request.user.is_authenticated else None,
            ip_address=request.META.get("REMOTE_ADDR"),
            user_agent=request.META.get("HTTP_USER_AGENT", "")[:500],
        )
        return resp

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        ctx["reviews"] = self.object.reviews.select_related("author").order_by("-id")
        ctx["booking_form"] = BookingForm()
        return ctx


@login_required
def booking_create(request, slug):
    """–°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω—å –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é."""
    listing = get_object_or_404(Listing, slug=slug)

    # üö´ –∑–∞–ø—Ä–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –æ–±—ä–µ–∫—Ç
    if _is_owner(request.user, listing):
        messages.error(request, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")
        return redirect("ads:listing_detail", slug=listing.slug)

    if request.method == "POST":
        form = BookingForm(request.POST)
        if form.is_valid():
            booking = form.save(commit=False)
            booking.listing = listing
            booking.guest = request.user.email or ""
            booking.created_at = timezone.now()
            booking.status = getattr(Booking, "STATUS_PENDING", "pending")
            booking.save()
            return redirect("ads:booking_success", slug=listing.slug)
    else:
        form = BookingForm()
    return render(request, "ads/booking_form.html", {"form": form, "listing": listing})


class BookingSuccessView(TemplateView):
    template_name = "ads/booking_success.html"

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        slug = self.kwargs.get("slug")
        if slug:
            ctx["listing"] = get_object_or_404(Listing, slug=slug)
        return ctx


# ========= API =========

class ListingViewSet(viewsets.ModelViewSet):
    serializer_class = ListingSerializer
    permission_classes = [permissions.AllowAny]

    def get_queryset(self):
        return (
            Listing.objects
            .annotate(
                reviews_count=Count("reviews"),
                avg_rating=Avg("reviews__rating")
            )
            .order_by("-id")
        )


class BookingViewSet(viewsets.ModelViewSet):
    queryset = Booking.objects.all()
    serializer_class = BookingSerializer

    def perform_create(self, serializer):
        serializer.save(guest=self.request.user)


class ReviewViewSet(viewsets.ModelViewSet):
    queryset = Review.objects.all()
    serializer_class = ReviewSerializer

    def perform_create(self, serializer):
        serializer.save(author=self.request.user)


class PopularListingView(APIView):
    def get(self, request):
        qs = (
            Listing.objects
            .annotate(
                views_count=Count("views"),
                reviews_count=Count("reviews"),
                avg_rating=Avg("reviews__rating"),
            )
            .order_by("-views_count", "-reviews_count")[:10]
        )
        return Response(ListingSerializer(qs, many=True).data)


class SearchStatsView(APIView):
    def get(self, request):
        by_type = Listing.objects.values("type").annotate(cnt=Count("id")).order_by("-cnt")
        by_location = (
            Listing.objects.values("location").annotate(cnt=Count("id")).order_by("-cnt")[:10]
        )
        return Response({"by_type": list(by_type), "top_locations": list(by_location)})


class ViewHistoryView(generics.ListAPIView):
    queryset = ViewHistory.objects.select_related("listing", "user").order_by("-id")
    permission_classes = [permissions.AllowAny]

    def list(self, request, *args, **kwargs):
        data = [{
            "listing": vh.listing.title,
            "listing_id": vh.listing_id,
            "user": getattr(vh.user, "username", None),
            "ip": vh.ip_address,
            "when": vh.created_at,
        } for vh in self.get_queryset()[:200]]
        return Response(data)


# ========= –•–æ—Å—Ç =========

def is_host(user):
    """
    –ö—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´—Ö–æ—Å—Ç–æ–º¬ª.
    –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –≤ –≥—Ä—É–ø–ø–µ 'Host' –ò–õ–ò –±—ã—Ç—å staff/superuser.
    """
    return user.is_authenticated and (
        user.groups.filter(name="Host").exists() or user.is_staff or user.is_superuser
    )


def _is_owner(user, listing):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –ø–æ owner_email (–ø–æ–ª–µ –µ—Å—Ç—å –≤ –ë–î)."""
    if not user.is_authenticated:
        return False
    owner_email = (listing.owner_email or "").strip().lower()
    user_email = (user.email or "").strip().lower()
    return bool(owner_email and user_email and owner_email == user_email)


def host_required(view_func):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä:
    - –µ—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω —Å next
    - –µ—Å–ª–∏ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –Ω–æ –Ω–µ —Ö–æ—Å—Ç ‚Üí 403 Forbidden (–±–µ–∑ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤)
    """
    @wraps(view_func)
    def _wrapped(request, *args, **kwargs):
        if not request.user.is_authenticated:
            return redirect(f"{reverse('users:login')}?next={request.get_full_path()}")
        if not is_host(request.user):
            raise PermissionDenied("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç–∞–º.")
        return view_func(request, *args, **kwargs)
    return _wrapped


class MyListingsView(ListView):
    """–°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ —Ö–æ—Å—Ç–∞)."""
    model = Listing
    template_name = "ads/my_listings.html"
    context_object_name = "listings"

    def get_queryset(self):
        user = self.request.user
        if not user.is_authenticated:
            return Listing.objects.none()
        email = (user.email or "").strip()
        return (
            Listing.objects
            .filter(owner_email__iexact=email)
            .annotate(
                reviews_count=Count("reviews"),
                avg_rating=Avg("reviews__rating"),
                views_count=Count("views"),
            )
            .order_by("-created_at", "-id")
        )


class MyBookingsHostView(ListView):
    """–í—Å–µ –±—Ä–æ–Ω–∏ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ—Å—Ç–∞."""
    model = Booking
    template_name = "ads/my_bookings_host.html"
    context_object_name = "bookings"

    def get_queryset(self):
        user = self.request.user
        if not user.is_authenticated:
            return Booking.objects.none()
        email = (user.email or "").strip()
        return (
            Booking.objects
            .select_related("listing")
            .filter(listing__owner_email__iexact=email)
            .order_by("-created_at", "-id")
        )


@login_required
def booking_approve(request, pk):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω—å (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –æ–±—ä—è–≤–ª–µ–Ω–∏—è)."""
    booking = get_object_or_404(Booking.objects.select_related("listing"), pk=pk)
    if not _is_owner(request.user, booking.listing):
        messages.error(request, "–ù–µ—Ç –ø—Ä–∞–≤: —ç—Ç–æ –Ω–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")
        return redirect("ads:my_bookings_host")
    if request.method == "POST":
        booking.status = getattr(Booking, "STATUS_APPROVED", "approved")
        booking.save(update_fields=["status"])
        messages.success(request, "–ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    return redirect("ads:my_bookings_host")


@login_required
def booking_decline(request, pk):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –±—Ä–æ–Ω—å (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –æ–±—ä—è–≤–ª–µ–Ω–∏—è)."""
    booking = get_object_or_404(Booking.objects.select_related("listing"), pk=pk)
    if not _is_owner(request.user, booking.listing):
        messages.error(request, "–ù–µ—Ç –ø—Ä–∞–≤: —ç—Ç–æ –Ω–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")
        return redirect("ads:my_bookings_host")
    if request.method == "POST":
        booking.status = getattr(Booking, "STATUS_DECLINED", "declined")
        booking.save(update_fields=["status"])
        messages.success(request, "–ë—Ä–æ–Ω—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    return redirect("ads:my_bookings_host")


@host_required
def listing_create(request):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —Ö–æ—Å—Ç–æ–≤."""
    if request.method == "POST":
        form = ListingForm(request.POST, request.FILES)
        if form.is_valid():
            listing = form.save(commit=False)
            if not listing.owner_email:
                listing.owner_email = request.user.email or ""
            if not listing.created_at:
                listing.created_at = timezone.now()
            listing.save()
            # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–µ–π–º—Å–ø–µ–π—Å
            return redirect("ads:listing_detail", slug=listing.slug)
    else:
        initial = {}
        if request.user.is_authenticated and request.user.email:
            initial["owner_email"] = request.user.email
        form = ListingForm(initial=initial)
    return render(request, "ads/listing_form.html", {"form": form})